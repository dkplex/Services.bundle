PATH_INFO = 'http://viastream.viasat.tv/PlayProduct/%s'

####################################################################################################

def NormalizeURL(url):

    return url.rstrip('/')

####################################################################################################

def MetadataObjectForURL(url):

    # get video xml
    xml = GetVideoXML(url)
    if xml is None:
        return None

    # set variables
    date    = Datetime.ParseDate(xml.findtext('BroadcastDate'))
    title   = xml.findtext('Title')
    summary = xml.findtext('LongDescription')
    art     = GetThumb(xml, 'PlayImage')
    thumb   = GetThumb(xml)

    # create video object
    return VideoClipObject(
        title       = title,
        summary     = summary,
        art         = art,
        thumb       = thumb,
        originally_available_at = date
    )

####################################################################################################

def MediaObjectsForURL(url):

    # create and return media obj
    return [
        MediaObject(
          audio_channels = 2,
          parts = [PartObject(key=Callback(PlayVideo, url = url))]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url):

    # get video xml
    xml = GetVideoXML(url)
    if xml is None:
        return None

    video_url = GetVideo(xml)

    # create objs
    oc = ObjectContainer()
    video_obj = VideoClipObject(key = url)
    media_obj = MediaObject()

    # add pre ad to media
    #if xml.find('AdCalls/preroll') is not None and Client.Platform <> ClientPlatform.iOS:
    #    for pre_ad in XML.ElementFromURL(xml.find('AdCalls/preroll').get('url')).findall('Ad/InLine/Creatives/Creative/Linear/MediaFiles/MediaFile'):
    #        media_obj.add(PartObject(key = url))

    # add main video part to media
    media_obj.add(PartObject(key = RTMPVideoURL(url = video_url)))

    # add post ad to media
    #if xml.find('AdCalls/postroll') is not None and Client.Platform <> ClientPlatform.iOS:
    #   for post_ad in XML.ElementFromURL(xml.find('AdCalls/postroll').get('url')).findall('Ad/InLine/Creatives/Creative/Linear/MediaFiles/MediaFile'):
    #        media_obj.add(PartObject(key = RTMPVideoURL(url = post_ad.text)))

    # append media to list
    video_obj.add(media_obj)
    oc.add(video_obj)

    return oc

####################################################################################################

def GetVideoXML(url):

    # find id
    id = url.split('/')[-1]

    try:
        xml = XML.ElementFromURL(PATH_INFO % id)
    except:
        try:
            xml = XML.ElementFromURL('http://viastream.player.mtgnewmedia.se/xml/xmltoplayer.php?type=Products&category=' + id)
        except:
            return None

    if len(xml.xpath('//Product')) < 1:
        return None
    else:
        return xml.xpath('//Product')[0]

####################################################################################################

def GetVideo(xml):

    url = ''

    node = xml.find('Videos/Video')
    url = node.findtext('Url')

    new_xml = XML.ElementFromURL(url).xpath('//GeoLock')[0]
    url = new_xml.findtext('Url')

    if 'not_allowed' in url:
        raise Ex.MediaGeoblocked

    return url

####################################################################################################

def GetThumb(xml, type='Boxart_small'):

    url = ''

    for node in xml.findall('Images/ImageMedia'):
        if node.findtext('Usage') == type:
            url = node.findtext('Url')
            break

    return url
