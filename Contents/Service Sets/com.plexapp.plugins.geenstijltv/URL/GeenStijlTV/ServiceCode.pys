VIDLINK = Regex("videourl: '(.*?)',")
VIDLINK2 = Regex("xgstvplayer\('(.*?)',")
VIDLINK3 = Regex("gstvplayer\('[0-9]+', '(.*?)',")
THUMBLINK = Regex("GSvideo.preview = '(.*?)';")

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = HTTP.Request(url).content
	content = HTML.ElementFromString(data)

	title_h1 = content.xpath('//article/h1')
	if len(title_h1) < 1:
		return None

	title = title_h1[0].text
	summary = content.xpath('//article/p')[0].text

	try:
		thumb = THUMBLINK.findall(data)[0]
	except:
		try:
			thumb = content.xpath('//article/img')[0].get('src')
		except:
			thumb = ''

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			audio_codec = AudioCodec.AAC,
			video_codec = VideoCodec.H264,
			container = 'mp4',
			video_resolution = 'sd',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	data = HTTP.Request(url).content
	video_url = VIDLINK.findall(data)

	if len(video_url) == 0:
		video_url = VIDLINK2.findall(data)

		if len(video_url) == 0:
			video_url = VIDLINK3.findall(data)

	if len(video_url) > 0:
		return IndirectResponse(VideoClipObject, key=video_url[0])
	else:
		Log("Can't find video for url: %s" % url)
		return
