RE_EP_DATA = Regex('.+Season (?P<season>[0-9]+), Episode (?P<episode>[0-9]+).+')
RE_PLAYER = Regex('swfobject.embedSWF\("(http://.+?)",')
RE_URI = Regex('swfobject.embedSWF\("http://.+?/(mgid.+?)",')
RE_AMPERSANDS = Regex('&(?!amp;)')

MRSS_URL = 'http://www.southparkstudios.com/feeds/video-player/mrss/mgid%3Acms%3Acontent%3Asouthparkstudios.com%3A'
MP4_URL = "http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s"

NAMESPACES = {"media":"http://search.yahoo.com/mrss/"}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	# Pages of older episodes sometimes redirect to the same URL, creating an endless loop. If we
	# are redirected, first check if the destination URL isn't the same as the input URL.
	try:
		data = HTML.ElementFromURL(url, follow_redirects=False)
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			if e.headers['Location'] != url:
				data = HTML.ElementFromURL(e.headers['Location'])
			else:
				return None

	title = data.xpath('//meta[@property="og:title"]')[0].get('content').split(' - ')[0]
	ep_title = title.split(' (')[0]
	ep_data = RE_EP_DATA.search(title).groupdict()
	season = ep_data['season']
	index = ep_data['episode']
	summary = data.xpath('//meta[@name="og:description"]')[0].get('content')
	thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')

	return EpisodeObject(
		title = ep_title,
		show = "South Park",
		season = int(season),
		index = int(index),
		summary = summary,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0)),
				PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=1)),
				PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=2))
				],
			bitrate = 1200,
			container = Container.MP4,
			video_resolution = '720',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0)),
				PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=1)),
				PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=2))
				],
			bitrate = 750,
			container = Container.MP4,
			video_resolution = '432',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=0)),
				PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=1)),
				PartObject(key=Callback(PlayVideo, url=url, bitrate="450", index=2))
				],
			bitrate = 450,
			container = Container.MP4,
			video_resolution = '288',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(url, bitrate='1200', index=0):

	BITRATES = ['450', '750', '1200']
	rtmp_url = None

	content = HTTP.Request(url).content
	uri = RE_URI.search(content)

	if not uri:
		raise Ex.MediaNotAvailable

	mrss_data = HTTP.Request(MRSS_URL + uri.group(1)).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	player_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)[index].get('url')
	player_data = XML.ElementFromURL(player_url)

	try:
		rtmp_url = player_data.xpath('//rendition[@bitrate="'+bitrate+'"]/src')[0].text
	except:
		index = BITRATES.index(bitrate)

		while index > -1:
			try:
				rtmp_url = player_data.xpath('//rendition/src')[index].text
				break
			except:
				index = index - 1

	if rtmp_url:
		stream_url = rtmp_url.split('/viacomspstrm/')[1]
		mp4_url = MP4_URL % stream_url

		return Redirect(mp4_url)
	else:
		raise Ex.MediaNotAvailable
