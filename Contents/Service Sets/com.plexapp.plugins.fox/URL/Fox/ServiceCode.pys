RE_VIDEO_DETAILS = Regex('video: ({"id":.+?"}),', Regex.DOTALL)

####################################################################################################
def MetadataObjectForURL(url):

	video = GetDetails(url)

	if not video:
		raise Ex.MediaNotAvailable

	episode_title = video['name']
	summary = video['shortDescription']
	show = video['category'].split('Series/')[1]
	thumbs = [video['videoStillURL'], video['thumbnailURL']]
	duration = int(video['length'])*1000
	index = int(video['episode'])
	season = int(video['season'])
	date = Datetime.ParseDate(video['airdate']).date()

	rating = None
	try: rating = video['rating']
	except: pass

	return EpisodeObject(
		title = episode_title,
		show = show,
		summary = summary,
		index = index,
		season = season,
		duration = duration,
		content_rating = rating,
		originally_available_at = date,
		thumb = Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key = WebVideoURL(url))]
		)
	]

####################################################################################################
def GetDetails(url):

	try:
		content = HTTP.Request(url).content
	except:
		raise Ex.MediaNotAvailable

	video_details = RE_VIDEO_DETAILS.search(content)

	if video_details:
		video = JSON.ObjectFromString(video_details.group(1))
		return video

	return None
