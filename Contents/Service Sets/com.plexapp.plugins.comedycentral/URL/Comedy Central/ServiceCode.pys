MRSS_PATH = "http://www.comedycentral.com/feeds/mrss?uri=%s"
MRSS_NS = {"media": "http://search.yahoo.com/mrss/"}
PLAYER_URL = 'http://media.mtvnservices.com/%s'

MP4_URL = "http://mtvnmobile.vo.llnwd.net/kip0/_pxn=0+_pxK=18639+_pxE=/44620/mtvnorigin/%s"
####################################################################################################
def MetadataObjectForURL(url):

	try:
		id = HTML.ElementFromURL(url).xpath('//div[@id="video_player_box"]')[0].get('data-mgid')
	except:
		return None

	item = XML.ElementFromURL(MRSS_PATH % id).xpath('//item')[0]

	title = item.xpath('./title')[0].text
	summary = item.xpath('./description')[0].text
	date = Datetime.ParseDate(item.xpath('./pubDate')[0].text).date()
	thumb = item.xpath('.//media:thumbnail', namespaces=MRSS_NS)[0].get('url')
	duration = int(float(item.xpath('.//media:content', namespaces=MRSS_NS)[0].get('duration')) * 1000)

	vc = VideoClipObject(
		title = title,
		summary = summary,
		originally_available_at = date,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
	)

	return vc

####################################################################################################
def MediaObjectsForURL(url):

	if '/full-episodes/' in url or '/episodes/' in url:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=4))
					],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=4))
					],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = '540',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=4))
					],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = '432',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
				),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=4))
					],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = '360',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=4))
					],
				bitrate = 750,
				container = Container.MP4,
				video_resolution = '288',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=0)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=1)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=2)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=3)),
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=4))
					],
				bitrate = 400,
				container = Container.MP4,
				video_resolution = '252',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	else:
		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="3500", index=0))
					],
				bitrate = 3500,
				container = Container.MP4,
				video_resolution = '720',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="2200", index=0))
					],
				bitrate = 2200,
				container = Container.MP4,
				video_resolution = '540',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1700", index=0))
					],
				bitrate = 1700,
				container = Container.MP4,
				video_resolution = '432',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
				),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="1200", index=0))
					],
				bitrate = 1200,
				container = Container.MP4,
				video_resolution = '360',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="750", index=0))
					],
				bitrate = 750,
				container = Container.MP4,
				video_resolution = '288',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			),
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayVideo, url=url, bitrate="400", index=0))
					],
				bitrate = 400,
				container = Container.MP4,
				video_resolution = '252',
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]
	
####################################################################################################
def PlayVideo(url, bitrate='1700', index=0):

	BITRATES = ['400', '750', '1200', '1700', '2200', '3500']

	data = HTML.ElementFromURL(url)
	uri = data.xpath('//div[@id="video_player_box"]')[0].get('data-mgid')

	mrss_data = XML.ElementFromURL(MRSS_PATH % uri)
	try:
		player_url = mrss_data.xpath('//media:content[@medium="video"]', namespaces=MRSS_NS)[index].get('url')
	except:
		return None

	player_data = XML.ElementFromURL(player_url)
	try:
		rtmp_url = player_data.xpath('//rendition[@bitrate="'+bitrate+'"]/src')[0].text
	except:
		rtmp_url = ''
		index = BITRATES.index(bitrate)
		while index > -1:
			try:
				rtmp_url = player_data.xpath('//rendition/src')[index].text
				break
			except:
				index = index - 1

	stream_url = rtmp_url.split('/viacomccstrm/')[1]
	mp4_url = MP4_URL % stream_url

	return Redirect(mp4_url)

####################################################################################################
def TestURLs():

	test_urls = []

	for episode in HTML.ElementFromURL('http://www.comedycentral.com/shows').xpath('//a[contains(@href, "/episodes/")]'):
		url = episode.get('href')

		if not url.startswith('http'):
			url = 'http://www.comedycentral.com%s' % url

		try:
			# It appears that sometimes links can be invalid. We should quickly test it before considering
			# using it as a Test URL.
			headers = HTTP.Request(url).headers
			test_urls.append(url)
		except: pass

		if len(test_urls) > 2:
			break

	return test_urls
