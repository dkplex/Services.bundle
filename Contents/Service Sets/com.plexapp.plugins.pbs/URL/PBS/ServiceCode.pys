from CoveAPI import connect as PBS
from SortThumbs import SortThumbs
from PBS_API import API_ID, API_SECRET

NAMESPACES = {'a':'http://www.w3.org/2001/SMIL20/Language'}

RE_TP_ID    =   Regex('http://video.pbs.org/video/([0-9]+)')

PBS_URL     = 'http://video.pbs.org/'

DETAILS = '/cove/v1/videos/?fields=mediafiles%2Cassociated_images&filter_tp_media_object_id='
    
def NormalizeURL(url):
    return url

def MetadataObjectForURL(url):
    tp_id = RE_TP_ID.search(url).group(1)
    video = PBS(String.Decode(API_ID), String.Decode(API_SECRET)).videos.get(DETAILS + tp_id)['results'][0]
    thumbs = SortThumbs(video['associated_images'])
    airdate = Datetime.ParseDate(video['airdate']).date()
    summary = video['long_description']
    title = video['title']
    duration = int(video['mediafiles'][0]['length_mseconds'])
    return  VideoClipObject(
        title=title,
        summary=summary,
        originally_available_at=airdate,
        duration=duration,
        thumb=Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
    )

def MediaObjectsForURL(url):
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            audio_channels = 2
        )
    ]

@indirect
def PlayVideo(url):
    tp_id = RE_TP_ID.search(url).group(1)
    video = PBS(String.Decode(API_ID), String.Decode(API_SECRET)).videos.get(DETAILS + tp_id)['results'][0]
    
    for media in video['mediafiles']:
        try:
            video_url = media['video_download_url']
            if video_url:
                break
        except:
            video_url = None
    
    if not video_url:
        raise Ex.MediaNotAvailable
    else:
        return IndirectResponse(VideoClipObject, key=video_url)
    
    ### Keeping this code just in case MP4s aren't available for all videos ###
    '''
    video_url = video['mediafiles'][-1]['video_data_url']
    Log(HTTP.Request(video_url + '&format=SMIL').content)
    smil = XML.ElementFromURL(video_url + '&format=SMIL')
    base = smil.xpath('//a:meta', namespaces=NAMESPACES)[0].get('base')
    clip = smil.xpath('//a:ref', namespaces=NAMESPACES)[0].get('src')
    
    if base.startswith('http'):
        final_url = base + clip
        if '.m3u8' in clip:
            Log('HTTPLiveStreamURL: %s' % final_url)
            return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=final_url))
        else:
            return IndirectResponse(VideoClipObject, key=final_url)
    else:
        clip = 'MP4:' + clip.split('.mp4')[0]
        return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=base, clip=clip))
    '''
    
def TestURLs():
    test_urls = []

    for show in HTML.ElementFromURL(PBS_URL).xpath('//div[@id="most-watched-videos"]//li'):
        url = show.xpath('.//div/a')[0].get('href')
        test_urls.append(url)

        if len(test_urls) == 3:
            break

    return test_urls
