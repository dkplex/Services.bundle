DETAILS_URL = 'http://current.com/x/%s/context=slide'
THUMB_END = '_400x300.jpg'
FLV_END = '.flv'
RE_CONTENT_ID = Regex('/(?P<id>[0-9]+)_')

####################################################################################################
def MetadataObjectForURL(url):

	if url.find('http://m.') == -1:
		url = url.replace('http://', 'http://m.')

	page = HTML.ElementFromURL(url)
	videos = page.xpath('//a[contains(@href, ".mp4")]')

	if len(videos) < 1:
		return None

	content_id = RE_CONTENT_ID.search(url).group('id')

	details_page = XML.ElementFromURL(DETAILS_URL % content_id)
	title = details_page.xpath("//contentTitle/text()")[0]
	description = details_page.xpath("//contentText/text()")[0]
	thumb = details_page.xpath("//thumbUrl/text()")[0] + THUMB_END
	date = details_page.xpath("//dateAdded/text()")[0]
	date = Datetime.ParseDate(date)

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		originally_available_at = date
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			optimized_for_streaming = True,
			audio_channels = 2,
			video_resolution = '320',
			parts = [PartObject(key=Callback(PlayVideo, url = url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	if url.find('http://m.') == -1:
		url = url.replace('http://', 'http://m.')

	page = HTML.ElementFromURL(url)
	videos = page.xpath('//a[contains(@href, ".mp4")]')

	if len(videos) < 1:
		return None

	return IndirectResponse(VideoClipObject, key=videos[0].get('href'))

####################################################################################################
def TestURLs():

	test_urls = []
	page = HTML.ElementFromURL("http://m.current.com/video/")

	for link in page.xpath("//div[@class='item']"):
		if len(test_urls) < 3:
			url = link.xpath(".//a")[0].get('href')

			if url.startswith("http://") == False:
				url = "http://current.com" + url

			if url not in test_urls:
				test_urls.append(url)
		else:
			break

	return test_urls
