RE_PID = Regex("pid\s*=\s*'?([^&']+)")
RE_VIDEO_ID = Regex('CBSVideo.setVideoId\("([0-9]+)"\);')
RE_VID_ID = Regex("vidId: '([0-9]+)'")
RE_VIDEO_PLATFORM = Regex('videoImagePlatform="([^"]+)')
RE_DURATION = Regex('(P?<minutes>[0-9]+):(P?<seconds>[0-9]{2})')

API_URL = "http://api.cnet.com/restApi/v1.0/videoSearch?videoIds=%s&showBroadcast=true&iod=images,videoMedia,relatedLink,breadcrumb,relatedAssets,broadcast,lowcache&videoMediaType=preferred&players=Download,RTMP&partTag=cntv"

CNET_NAMESPACE  = {'l':'http://api.cnet.com/rest/v1.0/ns'}
SMIL_NAMESPACE = {'a': 'http://www.w3.org/2001/SMIL20/Language', 'b': 'http://www.w3.org/2005/SMIL21/Language'}

CBS_URL = 'http://www.cbs.com'
CBS_SMIL_2 = 'http://release.theplatform.com/content.select?format=SMIL&Tracking=true&balance=true&MBR=true&pid=%s'
CBS_SMIL_3 = 'http://link.theplatform.com/s/dJ5BDC/%s?format=SMIL&Tracking=true&mbr=true'

CBS_SWF = "http://www.cbs.com/thunder/player/1_0/chromeless/1_5_1/CAN.swf"

PROFILES = ["WIFI-MED", "WIFI-LOW", "3G-MED"]

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):
  if ClipData(url):
    return MetadataObjectFromAPI(url)
  else:
    return MetadataObjectFromPAGE(url)

####################################################################################################
def MetadataObjectFromAPI(url):
  details = ClipData(url)

  if details != None:
    pass

  title = details.xpath('//l:Title', namespaces=CNET_NAMESPACE)[0].text
  originally_available_at = Datetime.ParseDate(details.xpath('//l:ProductionDate', namespaces=CNET_NAMESPACE)[0].text).date()
  summary = details.xpath('//l:Description', namespaces=CNET_NAMESPACE)[0].text
  duration = int(details.xpath('//l:LengthSecs', namespaces=CNET_NAMESPACE)[0].text)*1000

  try: content_rating = details.xpath('//l:ContentRatingOverall', namespaces=CNET_NAMESPACE)[0].text
  except: content_rating = None

  images = details.xpath('//l:Images/l:Image', namespaces=CNET_NAMESPACE)
  thumbs = SortImages(images)

  if details.xpath('//l:Feature', namespaces=CNET_NAMESPACE)[0].text == "full_episodes":
    show = details.xpath('//l:FranchiseName', namespaces=CNET_NAMESPACE)[0].text
    try: season = int(details.xpath('//l:SeasonNumber', namespaces=CNET_NAMESPACE)[0].text)
    except: season = None
    try: index = int(details.xpath('//l:EpisodeNumber', namespaces=CNET_NAMESPACE)[0].text)
    except: index = None

    eo = EpisodeObject(
      title = title,
      show = show,
      summary = summary,
      originally_available_at = originally_available_at,
      duration = duration,
      content_rating = content_rating,
      season = season,
      index = index,
      thumb = Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
    )
    return eo

  else:

    # Construct a metadata item
    co = VideoClipObject(
      title = title,
      originally_available_at = originally_available_at,
      duration = duration,
      content_rating = content_rating,
      summary = summary,
      thumb = Resource.ContentsOfURLWithFallback(url=thumbs, fallback='icon-default.png')
    )
    return co

####################################################################################################
def MetadataObjectFromPAGE(url):
  page = HTTP.Request(url, cacheTime=7200).content
  data = HTML.ElementFromString(page)

  if len( data.xpath('//div[@id="video-metadata-display-container"]//*[contains(text(), "Full Episode")]') ) > 0:
    video_type = "Full Episode"
  else:
    video_type = "Clip"

  title = data.xpath('//meta[@property="og:title"]')

  if len(title) < 1:
    return None
  else:
    title = title[0].get('content')

  if ' - ' in title:
    try:
      (show_title, episode_title, junk) = title.split(' - ', 2)

      if show_title.endswith(' Video'):
        show_title = show_title.rsplit(' ',1)[0]
    except: # This is not a webpage with an episode
      return None

  else:
    show_title = None
    episode_title = title

  summary = data.xpath('//meta[@property="og:description"]')[0].get('content')

  try:
    thumb = RE_VIDEO_PLATFORM.search(page).group(1)
  except:
    thumb = data.xpath('//meta[@property="og:image"]')[0].get('content')

  if video_type == "Full Episode":
    try:
      air_date = data.xpath('//div[@id="video-metadata-display-container"]//b[contains(text(), "Air Date")]/parent::p/text()')[0].strip()
      originally_available_at = Datetime.ParseDate(air_date).date()
    except:
      originally_available_at = None

    try:
      timecode = data.xpath('//div[@id="video-metadata-display-container"]//b[contains(text(), "Full Episode")]/parent::p/text()')[0].strip()
      duration = RE_DURATION.search(timecode)
      duration = ( (int(duration.group(minutes))*60) + int(duration.group(seconds)) ) * 1000
    except:
      duration = None

    # Construct a metadata item
    eo = EpisodeObject(
      title = episode_title,
      show = show_title,
      summary = summary,
      originally_available_at = originally_available_at,
      duration = duration, 
      thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
    )
    return eo

  elif video_type == "Clip":
    if show_title:
      ' - '.join([show_title, episode_title])
    else:
      title = episode_title

    co = VideoClipObject(
      title = title,
      summary = summary,
      thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
    )
    return co

####################################################################################################
def MediaObjectsForURL(url):
  return [
    MediaObject(
      video_resolution = '720',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = 720))],
    ),
    MediaObject(
      video_resolution = '480',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = 480))],
    ),
    MediaObject(
      video_resolution = 'sd',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True,
      parts = [PartObject(key=Callback(PlayVideo, url = url, res = 360))],
    )
  ]

####################################################################################################
@indirect
def PlayVideo(url, res=None, **kwargs):
  if ClipData(url):
    return VideoFromAPI(url, res)
  else:
    return VideoFromSMIL(url, res)

####################################################################################################
def VideoFromAPI(url, res):
  details = ClipData(url)

  video_dict = {}
  video_url = None
  for video in details.xpath('//l:VideoMedias/l:VideoMedia', namespaces=CNET_NAMESPACE):
    format = video.xpath("l:Format", namespaces=CNET_NAMESPACE)[0].text
    player = video.xpath("l:Player", namespaces=CNET_NAMESPACE)[0].text
    if format == "quicktime" and player == "Download":
      res = int(video.xpath("l:Height", namespaces=CNET_NAMESPACE)[0].text)
      url = video.xpath("l:DeliveryUrl", namespaces=CNET_NAMESPACE)[0].text
      video_dict[res] = url
    else:
      pass

  resolutions = video_dict.keys()
  resolutions.sort()
  resolutions.reverse()

  # Find the best match.
  for resolution in resolutions:
    if resolution <= res:
      video_url = video_dict[resolution]
      break

  # Return the first match.
  if not video_url and len(video_dict) > 0:
    video_url = video_dict[video_dict.keys()[0]]
  else:
    raise Ex.MediaNotAvailable

  return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def VideoFromSMIL(url, res):

  if url.find('pid=') == -1:
    page = HTML.ElementFromURL(url)
    url = page.xpath("//meta[@property = 'og:video']")

    if len(url) < 1:
      return None
    else:
      url = url[0].get('content')

  pid = RE_PID.search(url)

  if pid:
    pid = pid.group(1)
    try:
      smil = XML.ElementFromURL(CBS_SMIL_2 % pid, cacheTime=0)
      thePlatform_feed = 'feeds2'
    except:
      smil = XML.ElementFromURL(CBS_SMIL_3 % pid, cacheTime=0)
      thePlatform_feed = 'feeds3'
    
    if len(smil.xpath('//a:ref[contains(@abstract, "geo")]', namespaces = SMIL_NAMESPACE)) > 0:
      raise Ex.MediaGeoblocked

    video_url = None
    for profile in PROFILES:
      try:
        video_url = smil.xpath("//a:video[contains(@profile, '"+profile+"')]", namespaces = SMIL_NAMESPACE)[0].get('src')
        try:
          headers = HTTP.Request(video_url).headers
        except Ex.HTTPError, e:
          video_url = None
          raise e
        break
      except:
        pass
    if video_url:
      return IndirectResponse(VideoClipObject, key = video_url)
    else:
      if thePlatform_feed == 'feeds2':
        rtmp_url = smil.xpath('//a:ref[starts-with(@src, "rtmp")]', namespaces=SMIL_NAMESPACE)[-1].get('src')
        rtmp_params = rtmp_url.split('<break>')
        rtmp_url = rtmp_params[0]
        clip = rtmp_params[1]
      elif thePlatform_feed == 'feeds3':
        # Check for geoblock
        if len(smil.xpath('//*[contains(@title, "Geographic Restriction")]')) > 0:
            raise Ex.MediaGeoblocked

        rtmp_url = smil.xpath('//b:meta[starts-with(@base, "rtmp")]', namespaces=SMIL_NAMESPACE)[0].get('base')
        clip = smil.xpath('//b:ref[starts-with(@src, "video/")]', namespaces=SMIL_NAMESPACE)[0].get('src')
      
      if clip[-4:] == '.mp4':
        clip = 'MP4:' + clip[:-4]
      else:
        clip = clip.replace('.flv', '')
      
    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_url, clip=clip, swf_url=CBS_SWF))

####################################################################################################
def ClipData(url):
  if 'pid=' in url:
    return False

  page = HTTP.Request(url).content
  video_id = None

  id = RE_VIDEO_ID.search(page)

  if id:
    video_id = id.group(1)
  else:
    id = HTML.ElementFromString(page).xpath('//*[@videoid]')

    if len(id) > 0:
      video_id = id[0].get('videoid')
    else:
      id = RE_VID_ID.search(page)

      if id:
        video_id = id.group(1)

  if video_id:
    video_data = XML.ElementFromURL(API_URL % video_id)
  else:
    video_data = None

  return video_data

####################################################################################################
def SortImages(images=[]):

  thumbs = []
  for image in images:
      height = image.get('height')
      url = image.xpath('./l:ImageURL', namespaces=CNET_NAMESPACE)[0].text
      thumbs.append({'height':height, 'url':url})

  sorted_thumbs = sorted(thumbs, key=lambda thumb : int(thumb['height']), reverse=True)
  thumb_list = []
  for thumb in sorted_thumbs:
      thumb_list.append(thumb['url'])

  return thumb_list

####################################################################################################
def TestURLs():
  test_urls = []
  data = HTML.ElementFromURL(CBS_URL + '/video/')

  for item in data.xpath('//div[@id="show_block"]//a'):
    video_url = item.get('href')
    test_urls.append(video_url)

    if len(test_urls) > 3:
      break

  return test_urls
