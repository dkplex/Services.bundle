def MetadataObjectForURL(url):

    # Retrieve the page and obtain the video and player ids. We then use this to make a AMF
    # request which has all the information associated with the title.
    page = HTML.ElementFromURL(url)
    video_url = page.xpath('//meta[@property="og:video"]')[0].get('content')
    args = String.ParseQueryString(video_url)
    playerId = args['playerID'][0]
    videoId = args['videoId'][0]
    result = DoAmfRequest(playerId, videoId)

    # Extract the available information
    title = result['programmedContent']['videoPlayer']['mediaDTO']['linkText']
    description = result['programmedContent']['videoPlayer']['mediaDTO']['shortDescription']
    thumb = result['programmedContent']['videoPlayer']['mediaDTO']['videoStillURL']
    date = result['programmedContent']['videoPlayer']['mediaDTO']['publishedDate']

    # It appears that for some unknown reason, some of the videos do not have a known title by the 
    # player. If we detect this, we should simply extract it from the actual page.
    if title == None:
        title = page.xpath("//article/h1[@class='hXL']/text()")[0].strip()

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = thumb,
        originally_available_at = date
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
          video_codec = VideoCodec.H264,
          audio_codec = AudioCodec.AAC,
          container = Container.MP4,
          parts = [PartObject(key=Callback(PlayVideo, url = url))]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url):

    page = HTML.ElementFromURL(url)
    video_url = page.xpath('//meta[@property="og:video"]')[0].get('content')
    args = String.ParseQueryString(video_url)
    playerId = args['playerID'][0]
    videoId = args['videoId'][0]
    result = DoAmfRequest(playerId, videoId)

    result = DoAmfRequest(playerId, videoId)
    url = result['programmedContent']['videoPlayer']['mediaDTO']['FLVFullLengthURL']
    rtmp_details = url.split('&')
    return IndirectResponse(VideoClipObject, key = RTMPVideoURL(url = rtmp_details[0], clip = rtmp_details[1]))

####################################################################################################
class ContentOverride(object):
    def __init__ (self, videoId=None):
        self.contentType = int(0)
        self.contentIds = None
        self.target = 'videoPlayer'
        self.contentId = int(videoId)
        self.featuredRefId = None
        self.contentRefIds = None
        self.featuredId = float('nan')
        self.contentRefId = None

class ViewerExperienceRequest(object):
    def __init__ (self, playerId=None, video=None):
        self.experienceId = int(playerId)
        self.contentOverrides = []
        self.contentOverrides.append(video)
        self.TTLToken = ''
        self.URL = ''

####################################################################################################
def DoAmfRequest(playerId, videoId):
    client = AMF.RemotingService('http://c.brightcove.com/services/messagebroker/amf', user_agent='', amf_version=3)
    service = client.getService('com.brightcove.experience.ExperienceRuntimeFacade')
    
    AMF.RegisterClass(ContentOverride, 'com.brightcove.experience.ContentOverride')
    AMF.RegisterClass(ViewerExperienceRequest, 'com.brightcove.experience.ViewerExperienceRequest')
    
    video = ContentOverride(videoId)
    experience = ViewerExperienceRequest(playerId, video)
    return service.getDataForExperience('', experience)
