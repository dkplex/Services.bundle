NAMESPACES = {"a":"http://www.w3.org/2001/SMIL20/Language"}

YOUTUBE_BASE = 'http://www.youtube.com/watch?v=%s'
DETAILS_URL  = 'http://api.vevo.com/mobile/v1/video/%s.json?extended=true'
AUTH_URL     = 'http://videoplayer.vevo.com/VideoService/AuthenticateVideo?isrc=%s'
MP4_SMIL_URL = 'http://smilstream.vevo.com/HDFlash/v1/smil/%s/%s.smil'
VIDEO_URL    = 'http://www.vevo.com/watch/%s/%s/%s'

HLS_URLS = ['http://hls.media.vevo.com/%s/ipad/index_500_wifi.m3u8', 'http://hls.lvl3.strm.vevo.com/Video/V2/IPAD/%s/index.m3u8']
RTMP_URLS = ['http://smil.lvl3.vevo.com/Video/V2/VFILE/%s/%sr.smil', 'http://smil.lvl3.vevo.com/Video/V2/VFILE/%s/%s.smil', 'http://smilstream.vevo.com/HDFlash/v1/smil/%s/%sr.smil', 'http://smilstream.vevo.com/HDFlash/v1/smil/%s/%s.smil']

BITRATES = ["564000", "864000", "1328000", "1728000", "2528000", "3328000", "4392000", "5392000"]

####################################################################################################
def NormalizeURL(url):
    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):
    # Obtain the id of the title, and request the associated details page.
    id = url.split('/')[-1]
    details = JSON.ObjectFromURL(DETAILS_URL % id)['result']

    return VideoClipObject(
        title = details['title'],
        summary = details['description'],
        thumb = details['image_url'],
        duration = int(details['duration_in_seconds']) * 1000,
        originally_available_at = Datetime.ParseDate(details['created_at'].split('T')[0]),
        genres = details['genres']
    )

####################################################################################################
def MediaObjectsForURL(url):
    return [
      MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="5392000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "1080",
            bitrate = "5392",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="4392000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "1080",
            bitrate = "4392",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="3328000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "720",
            bitrate = "3328",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="2528000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "720",
            bitrate = "2528",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="1728000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "432",
            bitrate = "1728",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="1328000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "432",
            bitrate = "1328",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="864000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "288",
            bitrate = "864",
            audio_channels = 2
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate="564000"))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            optimized_for_streaming = True,
            video_resolution = "288",
            bitrate = "564",
            audio_channels = 2
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, bitrate, res=None):
    id = url.split('/')[-1]
    video_url = ''
    index = BITRATES.index(bitrate)
    try:
        smil = XML.ElementFromURL(MP4_SMIL_URL % (id, id.lower()))
        while index > -1:
            try:
                video_url = smil.xpath('//a:video[@system-bitrate="'+BITRATES[index]+'"]', namespaces=NAMESPACES)[0].get('src')
                break
            except:
                index = index -1
            if index == 0:
                if video_url == '':
                    video_url = smil.xpath('//a:video', namespaces=NAMESPACES)[0].get('src')
        
        return IndirectResponse(VideoClipObject, key="http://vstream.vevo.com/%s" % video_url)
    except:
        try:
            for m3u8_url in HLS_URLS:
                try:
                    headers = HTTP.Request(m3u8_url % id).headers
                    hls_url = m3u8_url
                    break
                except:
                    continue
                
            return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(hls_url % id))
        except:
            try:
                for smil_url in RTMP_URLS:
                    try:
                        smil = XML.ElementFromURL(smil_url % (id, id.lower()))
                    except:
                        continue
                player = smil.xpath('//a:meta', namespaces=NAMESPACES)[0].get('src')
                while index > -1:
                    try:
                        video_url = smil.xpath('//a:video[@system-bitrate="'+BITRATES[index]+'"]', namespaces=NAMESPACES)[0].get('src')
                        break
                    except:
                        index = index -1
                    if index == 0:
                        if video_url == '':
                            video_url = smil.xpath('//a:video', namespaces=NAMESPACES)[0].get('src')

                return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=video_url))
            except:
                yt_id = JSON.ObjectFromURL(AUTH_URL % id)['video']['videoVersions'][0]['id']
                media = URLService.MediaObjectsForURL(YOUTUBE_BASE % yt_id)
                index = BITRATES.index(bitrate)
                if index >= len(media):
                    return media[-1]
                else:
                    return media[index]

####################################################################################################
def TestURLs():
    test_urls = []
    results = JSON.ObjectFromURL('http://api.vevo.com/mobile/v1/video/list.json?order=mostrecent&max=3')['result']

    for result in results:
        url = VIDEO_URL % (result['artists_main'][0]['url_safename'], result['url_safe_title'], result['isrc'])
        test_urls.append(url)

    return test_urls
