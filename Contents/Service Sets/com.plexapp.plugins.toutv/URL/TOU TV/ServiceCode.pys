RE_EPISODE_ID = Regex("var episodeId = '(.+?)'")
RE_MEDIA_ID = Regex('http://api.radio-canada.ca/.+"idMedia":"(.+?)"')

NAMESPACES = {"a":"http://www.w3.org/2001/SMIL20/Language"}
SMIL_URL = "http://release.theplatform.com/content.select?format=SMIL&pid=%s&Embedded=True&Tracking=True"

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    smil = GetSMIL(url)
    details = GetSRC(smil)

    title = details.get('title')
    summary = details.get('abstract')

    try:
        runtime = details.get('dur')
        duration = int(runtime.strip('ms'))
    except:
        duration = 0

    thumb = details.get('imagePlayerLargeA')
    if thumb is None:
        thumb = ""

    try:
        show_title = details.get('Show')
        season = int(details.get('SeasonNumber'))
        episode = int(details.get('EpisodeNumber'))
        date = Datetime.ParseDate(details.get('OriginalAirDate')).date()

        try:
            directors = details.get('PeopleDirector')
            if directors:
                directors = directors.split(', ')
            else:
                directors = []
        except:
            directors = []

        try:
            writers = details.get('PeopleWriter')
            if writers:
                writers = writers.split(', ')
            else:
                writers = []
        except:
            writers = []

        return EpisodeObject(
            title = title,
            summary = summary,
            duration = duration,
            show = show_title,
            season = season, 
            index = episode,
            originally_available_at = date,
            directors = directors,
            writers = writers,
            thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
	    )
    except:
        pass

    return VideoClipObject(
        title = title,
        summary = summary,
        duration = duration,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback='icon-default.png')
    )

####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            video_resolution = "480",
            audio_channels = 2,
            parts = [PartObject(key=Callback(PlayVideo, url=url, res="720"))]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, res):
    smil = GetSMIL(url)
    source = GetSRC(smil).get('src')

    player = source.split('<break>')[0]
    clip = source.split('<break>')[1]

    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=player, clip=clip))

####################################################################################################
def GetSMIL(url):
    data = HTTP.Request(url).content

    try:
        pID = RE_EPISODE_ID.search(data).group(1)
    except:
        try:
            pID = RE_MEDIA_ID.search(data).group(1)
        except:
            raise Ex.MediaNotAvailable

    content = (HTTP.Request(SMIL_URL % pID).content).replace(" tp:", " ")
    smil = XML.ElementFromString(content)

    return smil

####################################################################################################
def GetSRC(smil):
    src_list = smil.xpath('//a:ref', namespaces=NAMESPACES)

    if len(src_list) == 1:
        if 'Unavailable.flv' in src_list[0].get('src'):
            if src_list[0].get('abstract') == "You are not in a geographic region that has access to this content.":
                # content is geo blocked
                raise Ex.MediaGeoblocked
            else:
                # just a general failure of the media not being available
                raise Ex.MediaNotAvailable

        else:
            return src_list[0]

    else:
        for ref in src_list:
            if "raca.tou.tv" in ref.get('src'):
                continue
            elif ref.get('src').startswith('rtmp'):
                return ref

    return None
