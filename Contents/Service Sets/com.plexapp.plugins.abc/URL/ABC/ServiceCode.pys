ABC_URL = "http://abc.go.com"
FEED_URL = "http://cdn.abc.go.com/vp2/ws/s/contents/2000/utils/mov/13/9024/%s/432"

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].replace(' ', '%20')

####################################################################################################
def MetadataObjectForURL(url):

	data = HTML.ElementFromURL(url)

	try: # Try to return an episode object first
		show_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[1]
		episode_title = data.xpath('//h2[@id="video_title"]')[0].text
		summary = data.xpath('//p[@id="video_desc"]')[0].text
		episode_index = data.xpath('//li[@id="video_num"]')[0].text.strip('Episode ')
		duration = data.xpath('//li[@id="video_dur"]')[0].text
		durationParts = duration.split(':')
		duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
		rating = data.xpath('//li[@id="video_rating"]')[0].text.split(' ')[0]
		thumb_url = data.xpath('//link[@rel="image_src"]')[0].get('href')

		# Construct a metadata item
		return EpisodeObject(
			title = episode_title,
			show = show_title,
			duration = duration, 
			index = int(episode_index),
			content_rating = rating,
			summary = summary,
			thumb = thumb_url
		)

	except: # If it's not an episode return a clip object
		clip_title = data.xpath('//meta[@name="title"]')[0].get('content').split(' - ')[0]

		try:
			thumb_url = data.xpath('//div[@id="show_callout"]/img')[0].get('src')
		except:
			thumb_url = ''

		return VideoClipObject(
			title = clip_title,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb_url, fallback='icon-default.png')
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1600))],
			protocol = Protocol.RTMP,
			bitrate = 1600,
			aspect_ratio = "1.78"
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1000))],
			protocol = Protocol.RTMP,
			bitrate = 1000,
			aspect_ratio = "1.78"
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=700))],
			protocol = Protocol.RTMP,
			bitrate = 700,
			aspect_ratio = "1.78"
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=500))],
			protocol = Protocol.RTMP,
			bitrate = 500,
			aspect_ratio = "1.78"
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate=1600):

	video_id = url.split('/')[-2]
	data = XML.ElementFromURL(FEED_URL % video_id)
	available_bitrates = data.xpath('//videos/video[not(@src="")]/@bitrate')

	if len(available_bitrates) < 1:
		raise Ex.MediaNotAvailable

	closest = min((abs(int(bitrate) - int(i.split('.')[0])), i) for i in available_bitrates)[1]

	streamer = 'rtmp://cp88586.edgefcs.net/abcondemand'
	clip = data.xpath('//videos/video[@bitrate="' + closest + '"]')[0].get('src')

	return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=streamer, clip=clip))

####################################################################################################
def TestURLs():

	test_urls = []
	data = HTML.ElementFromURL(ABC_URL)

	for video in data.xpath('//h2[contains(text(), "full episodes")]/following-sibling::div[@class="carouselListWrapper"]//a[@class="framedThumbnail"]'):
		url = video.get('href')

		if len(test_urls) < 3 and url not in test_urls:
			test_urls.append(url)
		else:
			break

	return test_urls
