import re

jsDrLive = "http://www.dr.dk/nu/embed/live?height=467&width=830"
jsDrRadioLive = "http://www.dr.dk/radio/channels/channels.json.drxml/"
apiBaseURL = "http://www.dr.dk/nu/api/%s"
apiBaseRadioWebURL = 'http://www.dr.dk/tjenester/medieapi/api/%s'
bwInt = {"high":1000, "medium":500, "low":250, "auto":20000}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	vc = VideoClipObject()
	
	# LIVE TV
	if re.search('http://(.+\.)?dr.dk/TV/live/.+', url):
		slug = url.rsplit('/',1)[1]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/Bundle/?BundleType='Channel'&DrChannel=true&ChannelType='TV'&Slug='%s'" % slug)
		except:
			raise Ex.MediaNotAvailable
		vc.title = drMeta['Data'][0]['Title']
		vc.summary = drMeta['Data'][0]['Description']

	
	# ON-Demand TV
	elif re.search('http://(.+\.)?dr.dk/TV/se/.*/.+',url):
		slug = url.split('/')[6].rsplit('#',1)[0]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Slug='%s'" % slug)
		except:
			raise Ex.MediaNotAvailable
		vc.title = drMeta['Data'][0]['Title']
		vc.summary = drMeta['Data'][0]['Description']
		
	## Live Radio
	elif re.search('http://.*.dr.dk/radio/player/\?[^i][^d].*', url):
		slug = url.rsplit('?',1)[1]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/Bundle/?BundleType='Channel'&DrChannel=true&ChannelType='RADIO'&SourceUrl=$eq('dr.dk/mas/whatson/channel/%s')" % slug)
		except:
			raise Ex.MediaNotAvailable
		vc.title = drMeta['Data'][0]['Title']
		vc.summary = drMeta['Data'][0]['Description']
#	 ON_DEMAND RADIO
	elif re.search('http://.*.dr.dk/radio/player/\?[i][d]/\d+',url):
		id = url.rsplit('/',1)[1]
		try:
			jsonDrOD = JSON.ObjectFromURL(apiBaseRadioWebURL % 'MediaItem/' + id)
		except:
			raise Ex.MediaNotAvailable
		vc.title = jsonDrOD['title']
		vc.duration = ( (int(jsonDrOD['duration'].rsplit(':')[0])*360) +(int(jsonDrOD['duration'].rsplit(':')[1])*60)+(int(jsonDrOD['duration'].rsplit(':')[2]))) * 1000
		vc.source_title = jsonDrOD['broadcastChannel']

		if 'broadcastTime' in jsonDrOD:
			if 'Date(' in jsonDrOD['broadcastTime']:
				timestamp = float( jsonDrOD['broadcastTime'].split('(')[1].split('+')[0] ) / 1000
				vc.originally_available_at = Datetime.FromTimestamp(timestamp).date()
			else:
				vc.originally_available_at = Datetime.ParseDate(jsonDrOD['broadcastTime']).date()
	return vc

####################################################################################################
def MediaObjectsForURL(url):

	mol = []
	# LIVE TV
	if re.search('http://(.+\.)?dr.dk/TV/live/.+', url):
		
		slug = url.rsplit('/',1)[1]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/Bundle/?BundleType='Channel'&DrChannel=true&ChannelType='TV'&Slug='%s'" % slug)
		except:
			raise Ex.MediaNotAvailable
		for streamingservers in drMeta['Data'][0]['StreamingServers']:
			if(streamingservers['LinkType'] == "Streaming"):
				for qualities in streamingservers['Qualities']:
					for streams in qualities['Streams']:
						
						mol.append(MediaObject(bitrate=qualities['Kbps'], parts=[PartObject(key=RTMPVideoURL(streamingservers['Server'], clip = streams['Stream'], width=None,height=None, live=True))]))
	# ON-DEMAND TV
	elif re.search('http://(.+\.)?dr.dk/TV/se/.*/.+',url):
		slug = url.split('/')[6].rsplit('#',1)[0]
		drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Slug='%s'" % slug)['Data'][0]
		if drMeta.get('Assets'):
			for assets in drMeta['Assets']:
				if assets.get('Kind') == "VideoResource":
					drAsset = JSON.ObjectFromURL(assets['Uri'])
					for links in drAsset.get('links'):
						if links.get('fileType') == 'mp4' and links.get('linkType') == 'Streaming':
							mol.append( MediaObject(bitrate = links.get('bitrateKbps', None),parts = [PartObject(key = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1], width = links.get('width', None), height = links.get('height',None), live = False) )]))
						elif links.get('filetype') == 'wmv' and links.get('linkType') == 'Streaming':
							mol.append( MediaObject(bitrate = links.get('bitrateKbps', None),parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=links.get('width', None), height=links.get('height', None)))]))
						
						
					break
					
#			Log.Debug(drMeta['Assets'])
		else:
			Log.Debug('ikk saa meget')
		
#		try:
#			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Slug='%s'" % slug)['Data']
#			if not drMeta[0].get('Assets', False):
#				raise Ex.MediaNotAvailable
#			else:	
#				for assets in drMeta.get('Assets'):
#					if assets['Kind'] == "VideoResource":
#						drResource = JSON.ObjectFromURL(assets['Uri'])
#						for links in drResource['links']:
#		#					if links.has_key['bitrateKbps']:
#							if links['fileType'] == 'mp4':
#								mo = MediaObject(parts = [PartObject(key = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1], width = None if 'width' not in links else links['width'], height = None if 'height' not in links else links['height'], live = False) )])
#							elif links['fileType'] == 'wmv':
#								mo = MediaObject(parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=None if 'width' not in links else links['width'], height=None if 'height' not in links else links['height']))])
#							if links.has_key('bitrateKbps'):
#								mo.bitrate =  links['bitrateKbps']
#							 
#							mol.append(mo)
#						
#		except Ex.MediaNotAvailable:
#			pass
					
	## Live Radio
	elif re.search("http://.*.dr.dk/radio/player/\?[^i][^d].*", url):
		try:
			jsonDrLive = JSON.ObjectFromURL(jsDrRadioLive)
		except:
			raise Ex.MediaNotAvailable

		for livestream in jsonDrLive:
			if url.rsplit('/?', 1)[1] == String.StripDiacritics(livestream['source_url']):
				if isinstance(livestream['mediaFile'], list):

					for mediafile in livestream['mediaFile']:
						mo = MediaObject(parts=[PartObject(key=RTMPVideoURL(mediafile.rsplit('/', 1)[0], clip=mediafile.rsplit('/', 1)[1], height=None, width=None, live=True))])
						mol.append(mo)

				elif isinstance(livestream['mediaFile'], basestring):
					mo = MediaObject(parts=[PartObject(key=RTMPVideoURL(livestream['mediafile'].rsplit('/', 1)[0], clip=livestream['mediafile'].rsplit('/', 1)[1], height=None, width=None, live=True))])
					mol.append(mo)
				break		
	return mol


####################################################################################################
@deferred
def ondemandRadioFromURL(url):

	mol = []
	mo = MediaObject()
	id = url.rsplit('/',1)[1]
	try:
		jsonDrOD = JSON.ObjectFromURL(apiBaseRadioWebURL % 'MediaItem/' + str(id))
	except:
		raise Ex.MediaNotAvailable

	try:	
		jsonMedia =  JSON.ObjectFromURL(jsonDrOD['mediaItemResourceUrl'])

		for links in jsonMedia['links']:
			if links['fileType'] == 'mp4':
				mo = MediaObject(parts = [PartObject(key = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1], width = None if 'width' not in links else links['width'], height = None if 'height' not in links else links['height'], live = False) )])
			elif links['fileType'] == 'wma':
				mo = MediaObject(parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=None if 'width' not in links else links['width'], height=None if 'height' not in links else links['height']))])
			elif links['fileType'] == 'mp3':
				mo = MediaObject(parts = [PartObject(key = Callback(PlayMP3, url = links['uri'], ext='.mp3'))])
			mol.append(mo)
	except:
		mol.append(MediaObject(parts = [PartObject(key = jsonDrOD['mediaItemResourceUrl'] )]))

	return mol

####################################################################################################
def PlayMP3(url):

	return Redirect(url)
