RADIO_NOWNEXT_URL = "http://www.dr.dk/tjenester/LiveNetRadio/datafeed/programInfo.drxml?channelId=%s"
jsDrRadioLive = "http://www.dr.dk/radio/channels/channels.json.drxml/"
apiBaseURL = "http://www.dr.dk/nu/api/%s"
apiBaseRadioWebURL = 'http://www.dr.dk/tjenester/medieapi/api/%s'
bwInt = {"high":1000, "medium":500, "low":250, "auto":20000}
ChannelNames = {"DR1":"DR1", "DR2":"DR2", "TVR":"DR Ramasjang", "TVK":"DR K","TVU":"DR Update","TVH":"DR HD"}

####################################################################################################
def NormalizeURL(url):

	return url.lower()

####################################################################################################
def MetadataObjectForURL(url):

	vc = VideoClipObject()
	geofilter = JSON.ObjectFromURL('http://www.dr.dk/TV/geofilter').get('outsideDenmark')
	
	# LIVE tv
	if '/tv/live/' in url:
		slug = url.rsplit('/',1)[1]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/Bundle/?BundleType='Channel'&DrChannel=true&ChannelType='TV'&Slug='%s'" % slug)
		except:
			Log.Debug('No conection to DR')
		finally:
			try:
				nowNext = JSON.ObjectFromURL('http://www.dr.dk/TV/live/info/%s/json' % slug)
				summary = unicode(String.StripTags(nowNext['Now'].get('Description')))
				title = unicode(nowNext['Now'].get('Title'))
				start = Datetime.FromTimestamp(nowNext['Now'].get('StartTimestamp')/1000).strftime('%H:%M') + ')\n'
				stop = Datetime.FromTimestamp(nowNext['Now'].get('EndTimestamp')/1000).strftime('%H:%M') + ')\n'
				now = 'Nu: ' + title + '\n(' + start + ' - ' + stop + ')\n'+ summary
				summary = unicode(String.StripTags(nowNext['Next'].get('Description')))
				title = unicode(nowNext['Next'].get('Title'))
				start = Datetime.FromTimestamp(nowNext['Next'].get('StartTimestamp')/1000).strftime('%H:%M') + ')\n'
				stop = Datetime.FromTimestamp(nowNext['Next'].get('EndTimestamp')/1000).strftime('%H:%M') + ')\n'
				next = now + '\n\n' + 'Nu: ' + title + '\n(' + start + ' - ' + stop + ')\n'+ summary
			except:
				Log.Debug('Could not retrieve NowNext for ' + slug)
			else:
				vc.summary = next
			
			vc.title = drMeta['Data'][0]['Title']
			vc.thumb = R('icon-%s.png' % slug)

	
	# ON-Demand TV
	elif '/tv/se/' in url:
		slug = url.split('/')[6].rsplit('#',1)[0]
		
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Slug='%s'" % slug)['Data'][0]
		except:
			Log.Debug('No conection to DR')
		else:
			try:
				vc.title = unicode(drMeta.get('Title'))
				vc.summary = unicode(String.StripTags(drMeta.get('Description')))
				
				for assets in drMeta.get('Assets'):
					if assets.get('Kind') == 'Image':
						if 'ContentType' in assets:
							vc.thumb = assets.get('Uri') + '?height=512&width=512'
							break
						else:
							vc.thumb = assets.get('Uri') + '?height=512&width=512'
				for assets in drMeta.get('Assets'):
					if assets.get('Kind') == 'VideoResource':
						
						vc.duration = assets.get('DurationInMilliseconds')
						xpDate =  Datetime.ParseDate(assets.get('EndPublish').rsplit('Z',1)[0])
						ddDate = Datetime.Now()
						epDelta = xpDate - ddDate
						if epDelta.days <= 0:
							Log.Debug('Media no longer available')
							raise Ex.MediaExpired
						if geofilter is True and assets.get('RestrictedToDenmark') is True:
							Log.Debug('Only available in Denmark')
							raise Ex.MediaGeoblocked
				for broadcasts in drMeta.get('Broadcasts'):
					if broadcasts.get('IsRerun') is False:
						vc.originally_available_at = Datetime.ParseDate( broadcasts.get('BroadcastDate'))
						vc.tagline = broadcasts.get('tagline')
						vc.countries = [broadcasts.get('ProductionCountry')]
						
						break
				vc.genres = [drMeta.get('GenreText')]
				vc.source_title = ChannelNames[drMeta.get('PrimaryChannel').rsplit('/',1)[1]]
				vc.year = drMeta.get('ProductionYear')
				vc.studio = "Danmarks Radio"
				
				
				
				
						
			except:
				Log.Debug('Problems constructing metadata for ' + url)
			
		
	## Live Radio
	elif '/radio/player/' in url and '?id' not in url:
		slug = url.rsplit('?',1)[1].upper()
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/Bundle/?BundleType='Channel'&DrChannel=true&ChannelType='RADIO'&SourceUrl=$eq('dr.dk/mas/whatson/channel/%s')" % slug)
			vc.title = drMeta['Data'][0].get('Title')
		except:
			Log.Debug('No conection to DR')
		else:
			
			try:
				nowNext = JSON.ObjectFromURL(RADIO_NOWNEXT_URL % slug.lower())
				now = ""
				now += nowNext['currentProgram'].get('title') + '\n'
				now += '(' + Datetime.ParseDate(nowNext['currentProgram'].get('start') ).strftime('%H:%M') + ' - '
				now += Datetime.ParseDate(nowNext['currentProgram'].get('stop') ).strftime('%H:%M') + ')\n'
				now += String.StripTags(nowNext['currentProgram'].get('description')) + '\n'
				now = "\n\n"
				now += nowNext['nextProgram'].get('title') + '\n'
				now += '(' + Datetime.ParseDate(nowNext['nextProgram'].get('start') ).strftime('%H:%M') + ' - '
				now += Datetime.ParseDate(nowNext['nextProgram'].get('stop') ).strftime('%H:%M') + ')\n'
				now += String.StripTags(nowNext['currentProgram'].get('description')) + '\n'
				vc.summary = now
			except:
				vc.summary = drMeta['Data'][0]['Description']
				Log.Debug('Metadata not available for radiochannel ' +slug)
			
				
				
				
			
#			vc.summary = drMeta['Data'][0]['Description']
#	 ON_DEMAND RADIO
	elif '/radio/player/' in url and '?id' in url:
		id = url.rsplit('/',1)[1]
		try:
			jsonDrOD = JSON.ObjectFromURL(apiBaseRadioWebURL % 'MediaItem/' + id)
		except:
			Log.Debug('No conection to DR')
		vc.title = jsonDrOD.get('title')
		duration = Datetime.ParseDate(jsonDrOD.get('duration')).time()
		hour = duration.hour * 3600000
		minute = duration.minute * 60000
		second = duration.second * 1000
		vc.duration = hour + minute + second
		
#		vc.duration = ( (int(jsonDrOD.get('duration').rsplit(':')[0])*360) +(int(jsonDrOD.get'duration'].rsplit(':')[1])*60)+(int(jsonDrOD['duration'].rsplit(':')[2]))) * 1000
		vc.source_title = jsonDrOD['broadcastChannel']

		if 'broadcastTime' in jsonDrOD:
			if 'Date(' in jsonDrOD['broadcastTime']:
				timestamp = float( jsonDrOD['broadcastTime'].split('(')[1].split('+')[0] ) / 1000
				vc.originally_available_at = Datetime.FromTimestamp(timestamp).date()
			else:
				vc.originally_available_at = Datetime.ParseDate(jsonDrOD['broadcastTime']).date()
	else:
		Log.Debug('Could not get ' + url)
	return vc

####################################################################################################
def MediaObjectsForURL(url):

	mol = []
	# LIVE TV
	if '/tv/live/' in url:
		
		slug = url.rsplit('/',1)[1]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/Bundle/?BundleType='Channel'&DrChannel=true&ChannelType='TV'&Slug='%s'" % slug)
		except:
			Log.Debug('No conection to DR')
		for streamingservers in drMeta['Data'][0]['StreamingServers']:
			# Ios Live
			if(streamingservers['LinkType'] == "Ios"):
				for qualities in streamingservers['Qualities']:
					for streams in qualities['Streams']:
						mol.append(MediaObject(bitrate=qualities['Kbps'],
											
											protocols = ["HTTPLiveStreaming"],
											platforms = [ClientPlatform.iOS],
											video_frame_rate = 25,
											parts = [
													PartObject(key = streamingservers.get('Server')+'/'+streams['Stream'])
													]
											)
								)
						
			if(streamingservers['LinkType'] == "Streaming"):
				for qualities in streamingservers['Qualities']:
					for streams in qualities['Streams']:
						
						mol.append(MediaObject(bitrate=qualities['Kbps'], 
											parts=[PartObject(key=RTMPVideoURL(streamingservers['Server'], 
																			clip = streams['Stream'], 
																			width=None,
																			height=None, live=True))]))
	# ON-DEMAND TV
	elif '/tv/se/' in url:
		slug = url.split('/')[6].rsplit('#',1)[0]
		drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Slug='%s'" % slug)['Data'][0]
		if drMeta.get('Assets'):
			for assets in drMeta['Assets']:
				if assets.get('Kind') == "VideoResource":
					drAsset = JSON.ObjectFromURL(assets['Uri'])
					for links in drAsset.get('links'):
						if links.get('fileType') == 'mp4' and links.get('linkType') == 'Streaming':
							mol.append( MediaObject(bitrate = links.get('bitrateKbps', None),parts = [PartObject(key = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1], width = links.get('width', None), height = links.get('height',None), live = False) )]))
						elif links.get('filetype') == 'wmv' and links.get('linkType') == 'Streaming':
							mol.append( MediaObject(bitrate = links.get('bitrateKbps', None),parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=links.get('width', None), height=links.get('height', None)))]))
						
						
					break
					
		else:
			Log.Debug('ikk saa meget')
		
					
	## Live Radio
	elif '/radio/player/' in url and '?id' not in url:
		Log.Debug('Live baby')
		slug = url.rsplit('?',1)[1]
		try:
			drMeta = JSON.ObjectFromURL('http://www.dr.dk/radio/channels/channels.json.drxml')
			
		except:
			Log.Debug('Could not connect to DR')
		else:
			for channels in drMeta:
				if channels.get('source_url') == slug.upper():					
					for mediafile in channels['mediaFile']:
						url = mediafile.rsplit('/',1)
						mol.append(MediaObject(parts = [PartObject(key = RTMPVideoURL(url[0], clip = url[1], live = True))]))
						Log.Debug(url[0])
					break
	elif '/radio/player/?id/' in url:
		try:
			mol=ondemandRadioFromURL(url)
		except:
			Log.Debug('could not get on-demand radio for' + url)		
	return mol


####################################################################################################
@deferred
def ondemandRadioFromURL(url):

	mol = []
	mo = MediaObject()
	id = url.rsplit('/',1)[1]
	try:
		jsonDrOD = JSON.ObjectFromURL(apiBaseRadioWebURL % 'MediaItem/' + str(id))
	except:
		Log.Debug('No conection to DR')

	try:	
		jsonMedia =  JSON.ObjectFromURL(jsonDrOD['mediaItemResourceUrl'])

		for links in jsonMedia['links']:
			if links['fileType'] == 'mp4':
				mo = MediaObject(parts = [PartObject(key = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1], width = None if 'width' not in links else links['width'], height = None if 'height' not in links else links['height'], live = False) )])
			elif links['fileType'] == 'wma':
				mo = MediaObject(parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=None if 'width' not in links else links['width'], height=None if 'height' not in links else links['height']))])
			elif links['fileType'] == 'mp3':
				mo = MediaObject(parts = [PartObject(key = Callback(PlayMP3, url = links['uri'], ext='.mp3'))])
			mol.append(mo)
	except:
		mol.append(MediaObject(parts = [PartObject(key = jsonDrOD['mediaItemResourceUrl'] )]))

	return mol

####################################################################################################
def PlayMP3(url):

	return Redirect(url)


