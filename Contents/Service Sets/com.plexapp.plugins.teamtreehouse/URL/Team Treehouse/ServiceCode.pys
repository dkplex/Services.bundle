RE_DURATION = Regex('Time: (?P<mins>[0-9]+) minutes (?P<secs>[0-9]+) seconds')

####################################################################################################
def MetadataObjectForURL(url):

	try:
		page = HTML.ElementFromURL(url)
	except:
		return None

	try: title = page.xpath("//div[@class='page-footing']//h2/text()")[0]
	except: title = page.xpath("//title/text()")[0]

	thumb = page.xpath("//div[@class='video-player-container']//video")[0].get('poster')
	summary = page.xpath("//meta[@name='description']")[0].get('content')

	try:
		duration_text = page.xpath("//div[@id='page']//section[@class='primary']/p/text()")[0]
		duration_dict = RE_DURATION.search(duration_text).groupdict()
		mins = int(duration_dict['mins'])
		secs = int(duration_dict['secs'])
		duration = ((mins * 60) + secs) * 1000
	except:
		duration = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb,
		duration = duration
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			container = 'mp4',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			parts = [PartObject(key=Callback(PlayVideo, url = url))],
			audio_channels = 2
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	page = HTML.ElementFromURL(url)
	video_url = page.xpath("//div[@class='video-player-container']//video/source")[0].get('src')
	return IndirectResponse(VideoClipObject, key=video_url)
