import urlparse

# Allow any length for these content types
VALID_TYPES = ['text/html', 'application/xhtml+xml']

# Only allow response sizes below a certain length for arbitrary types
MAX_LENGTH = 1024

EMBEDDED_VIDEO = [
	("//iframe", "src"), 
	("//embed", "src"), 
	("//object", "data"), 
	("//param[@name='flashvars']", "value")
]

# Use the iPad user agent to try to make websites give us <video> instead of Flash
HTTP_IPAD_UA = {'User-Agent':'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10'}
HTTP_DESKTOP_UA = {'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/536.26.14 (KHTML, like Gecko) Version/6.0.1 Safari/536.26.14'}

RE_IPV4_PRIVATE = Regex('(^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)|(^localhost$)|(\.local$)')
RE_PATTERN = Regex('("|\'|&quot;|%22)(?P<vid>(https?(:|%3A)(//|%2F%2F)|(/|%2F))[^{}"\']+?\.(m3u8|mov|mp(e)?g|avi|mkv|mp4|m4v|flv)((\?|%3F).+?)?)("|\'|&quot;|%22)', Regex.IGNORECASE)
RE_SUB_PATTERN = Regex('=(http[^&]+\.(mp4|m4v|flv)[^&]*)')
RE_YOUTUBE = Regex('("|\'|&quot;|%22)(?P<vid>https?:((\\\+)?/){2}(www\.)?youtu((be\.com|be\.googleapis\.com)(\\\+)?/(v(\\\+)?/|watch\?v=|e(mbed)?(\\\+)?/)(?!__videoid__)|\.be(\\\+)?/)([a-z0-9_\-]){11}).*?("|\'|&quot;|%22)', Regex.IGNORECASE)
RE_CODECS = Regex('codecs="([^"]+)"')
RE_WHITESPACE = Regex('\s*,\s*')
RE_META_REFRESH = Regex('<meta.+?http-equiv=.refresh.+?content=.([0-9]+;url=)?(?P<url>https?://[^"\']+)', Regex.IGNORECASE)

####################################################################################################
def FixUrl(parent_url, url):

	parent_url = urlparse.urlparse(parent_url)

	if url and url[0] == '/':
		# Absolute path
		final_url = '%s://%s%s' % (parent_url.scheme, parent_url.netloc, url)
	elif url and url.find('://') == -1:
		# Relative path
		final_url = '%s://%s%s/%s' % (parent_url.scheme, parent_url.netloc, parent_url.path.rsplit('/',1)[0], url)
	else:
		final_url = url

	final_url = final_url.replace('&amp;', '&').replace('&amp;', '&') # Twice in case we have &amp;amp;

	return final_url

####################################################################################################
def ValidURL(url):

	if not isinstance(url, basestring):
		return False

	url = urlparse.urlparse(url)

	if url.scheme not in ['http', 'https']:
		return False

	if RE_IPV4_PRIVATE.search(url.hostname):
		return False

	return True

####################################################################################################
def ShouldParse(req):

	# Check the content type and content length headers
	try:
		content_type = req.headers['content-type'].split(';')[0].strip()
	except:
		content_type = 'Unknown'
	try:
		content_length = int(req.headers['content-length'])
	except:
		content_length = 0

	Log("Length: %d  Type: %s", content_length, content_type)
	if (content_length <= 0 or content_length > MAX_LENGTH) and content_type not in VALID_TYPES:
		Log("Content length for unknown type %s is invalid - aborting", content_type)
		return False

	return True

####################################################################################################
def FindExternalSource(req):

	doc = HTML.ElementFromString(req.content)

	# We're going to search through the HTML for known embedded video types. If we find any, 
	# then we can check their validity using the currently supported regular expressions.
	for (select, node) in EMBEDDED_VIDEO:
		for video in doc.xpath(select):
			try:
				node_url = video.get(node)
				if isinstance(node_url, basestring) and node_url.startswith('http'):
					for sources_check in URLService.AllPatterns:
						try:
							if len(Regex(sources_check).findall(node_url)) > 0:
								return node_url
						except: pass
			except: pass

	return None

####################################################################################################
def CodecsForVideoTypeValue(value):

	if value == None:
		return None

	match = RE_CODECS.search(value)
	if match:
		return RE_WHITESPACE.split(match.groups()[0])

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	try:
		if not ValidURL(url):
			return None

		if '#ipad-ua' in url:
			headers = HTTP_IPAD_UA
		else:
			headers = HTTP_DESKTOP_UA

		req = HTTP.Request(url.split('#')[0], cacheTime=0, headers=headers, follow_redirects=False)

		try:
			req.headers
		except Ex.RedirectError, e:
			if 'Location' in e.headers:
				if e.headers['Location'].split('://',1)[1] != url.split('://',1)[1]:
					Log.Debug(' --> [Metadata] Found an HTTP redirect to a new URL: %s' % e.headers['Location'])
					return URLService.MetadataObjectForURL(e.headers['Location'])
				return None

		if ShouldParse(req):

			# Embedded Video
			source_url = FindExternalSource(req)
			if source_url is not None:
				Log.Debug(' --> [Metadata] Found an embedded video: %s' % source_url)
				return URLService.MetadataObjectForURL(source_url)

			doc = HTML.ElementFromString(req.content)

			# HTML5 Video
			videos = doc.xpath('//video[@src and not(@src="")]|//video/source/parent::video')

			if len(videos) > 0:
				Log.Debug(' --> [Metadata] Found an HTML5 video')
				tag = videos[0]

				try: thumb = FixUrl(url, tag.get('poster'))
				except: thumb = None

				return VideoClipObject(
					title = tag.get('title') or doc.xpath('//title')[0].text.strip(),
					thumb = thumb
				)

			# Meta tag refresh
			refresh = RE_META_REFRESH.search(req.content)

			if refresh:
				if refresh.group('url').split('://',1)[1] != url.split('://',1)[1]:
					Log.Debug(' --> [Metadata] Found a meta refresh tag with a new URL: %s' % refresh.group('url'))
					return URLService.MetadataObjectForURL(refresh.group('url'))

			# Regex Video
			video = RE_PATTERN.search(req.content)

			if video:
				Log.Debug(' --> [Metadata] Found a video using the regex')
				return VideoClipObject(
					title = doc.xpath('//title')[0].text.strip()
				)

			# Regex Video YouTube
			youtube = RE_YOUTUBE.search(req.content)

			if youtube:
				youtube_url = youtube.group('vid').replace('\\', '')
				Log.Debug(' --> [Metadata] Found a YouTube video using the YouTube regex: %s' % youtube_url)
				return URLService.MetadataObjectForURL(youtube_url)

		if not '#ipad-ua' in url:
			return URLService.MetadataObjectForURL('%s#ipad-ua' % url)

	except:
		return None

####################################################################################################
def MediaObjectsForURL(url):

	try:
		if not ValidURL(url):
			return None

		if '#ipad-ua' in url:
			headers = HTTP_IPAD_UA
		else:
			headers = HTTP_DESKTOP_UA

		req = HTTP.Request(url.split('#')[0], cacheTime=0, headers=headers, follow_redirects=False)

		try:
			req.headers
		except Ex.RedirectError, e:
			if 'Location' in e.headers:
				if e.headers['Location'].split('://',1)[1] != url.split('://',1)[1]:
					Log.Debug(' --> [Media] Found an HTTP redirect to a new URL: %s' % e.headers['Location'])
					return URLService.MediaObjectsForURL(e.headers['Location'])
				return None

		if ShouldParse(req):

			doc = HTML.ElementFromString(req.content)

			# HTML5 Video
			videos = doc.xpath('//video[@src and not(@src="")]|//video/source/parent::video')

			if len(videos) > 0:
				Log.Debug(' --> [Media] Found an HTML5 video')
				tag = videos[0]

				result = []
				sources = tag.xpath('./source')
				sources.insert(0, tag)

				for source in sources:
					src = source.get('src')

					if src == None:
						continue

					src = FixUrl(url, src)
					Log.Debug(' --> %s' % src)
					videoType = source.get('type')
					codecs = CodecsForVideoTypeValue(videoType)

					attrs = {
						'parts': [PartObject(key=src)]
					}

					if codecs and len(codecs) > 0:
						attrs['video_codec'] = codecs[0]

					if codecs and len(codecs) > 1:
						attrs['audio_codec'] = codecs[1]

					result.append(MediaObject(**attrs))

				return result

			# Regex Video
			video = RE_PATTERN.search(req.content)

			if video:
				src = video.group('vid')

				sub = RE_SUB_PATTERN.findall(src)

				if len(sub) > 0:
					src = sub[-1][0]

				src = String.Unquote(src)
				src = FixUrl(url, src)
				Log.Debug(' --> [Media] Found a video using the regex: %s' % src)

				if src.find('.m3u8') != -1:
					return [
						MediaObject(
							parts = [PartObject(key=HTTPLiveStreamURL(src))]
						)
					]
				else:
					return [
						MediaObject(
							parts = [PartObject(key=src)]
						)
					]

		if not '#ipad-ua' in url:
			return URLService.MediaObjectsForURL('%s#ipad-ua' % url)

	except:
		return None
